{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["dataKeys","systemKeys","itemKeys","verifyItem","item","every","key","hasOwnProperty","name","price","percent","verifyItems","items","verifySystem","system","length","Object","keys","buy","sell","System","className","map","index","Math","abs","this","list","props","displayBuy","listBuy","displaySell","listSell","title","onClick","remove","systemData","glyphs","tags","React","Component","ListInput","onAdd","newCount","state","count","onChanges","push","setState","onRemove","pop","fun","ikey","iindex","convFunc","type","ev","target","value","parseInt","parseFloat","Error","HTMLValueConverter","data","onChange","placeholder","Create","error","enabled","disabled","updateObject","obj","forEach","Creator","snRef","gRef","tRef","bRef","sRef","cRef","reset","systemName","current","invalidItem","undefined","create","systems","some","Set","size","onCreate","createRef","ref","update","Popup","open","display","close","id","text","buttons","action","button","App","pRef","search","event","toLowerCase","filter","localStorage","setItem","JSON","stringify","systemsS","getItem","parse","role","aria-label","indexOf","fromSystemData","nsdm","tag","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","onchange","files","fr","FileReader","onloadend","alert","result","console","log","Array","isArray","e","readAsText","clear","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.960f52c0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// import data from './nms.json';\n\ninterface Item {\n    name: string;\n    price: number;\n    percent: number;\n}\n\nconst dataKeys = [\"systems\"];\nconst systemKeys = [\"name\", \"glyphs\", \"tags\", \"buy\", \"sell\"];\nconst itemKeys = [\"name\", \"price\", \"percent\"];\n\nfunction verifyItem(item: any): boolean {\n    return typeof item === 'object'\n    && itemKeys.every(key => item.hasOwnProperty(key))\n    && typeof item.name === 'string'\n    && typeof item.price === 'number'\n    && typeof item.percent === 'number';\n}\n\nfunction verifyItems(items: any[]): boolean {\n    return items.every(verifyItem);\n}\n\nfunction verifySystem(system: any): boolean {\n    if (typeof system === 'object'\n        && systemKeys.every(key => (system as object).hasOwnProperty(key))\n        && systemKeys.length === Object.keys(system).length\n    ) {\n        return verifyItems((system as SystemData).buy) && verifyItems((system as SystemData).sell);\n    }\n    return false;\n}\n\nfunction verifyData(data: any): boolean {\n    console.log(data.systems)\n    if (Array.isArray(data)) {\n        return data.every(verifySystem);\n    } else if (typeof data === 'object'\n        && dataKeys.every(key => data.hasOwnProperty(key))\n        && Array.isArray(data.systems)\n    ) {\n        return data.systems.every(verifySystem);\n    }\n    return false;\n}\n\ninterface SystemData {\n    name: string;\n    glyphs: string;\n    tags: string[];\n    buy: Item[];\n    sell: Item[];\n}\n\ninterface SystemProps extends SystemData {\n    displayBuy: boolean;\n    displaySell: boolean;\n    remove: (name: string) => any;\n}\n\nclass System extends React.Component<SystemProps, {}> {\n\n    list(items: Item[], buy: boolean): React.ReactNode {\n        return (\n            <ul className={\"items\"}>\n                {\n                    items.map((item, index) => {\n                        return (\n                            <li key={index} className={\"item text\"}>\n                                <div className={\"clear\"}>\n                                      <span className={\"left\"}>\n                                          {item.name}\n                                      </span>\n                                    <span className={\"right\"}>\n                                          &#x244;&nbsp; {item.price}\n                                      </span>\n                                </div>\n                                <div className={\"clear\"}>\n                                    <div className={\"right\"}>\n                                        {buy ? item.percent > 0 ?\n                                            [<span key={index + \":arrow\"} className={\"red bold\"}> &uarr; </span>] :\n                                            [<span key={index + \":arrow\"} className={\"green bold\"}> &darr; </span>]\n                                            : item.percent > 0 ?\n                                                [<span key={index + \":arrow\"}\n                                                       className={\"green bold\"}> &uarr; </span>] :\n                                                [<span key={index + \":arrow\"} className={\"red bold\"}> &darr; </span>]\n                                        }&nbsp;{Math.abs(item.percent)}&nbsp;%\n                                    </div>\n                                </div>\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n        );\n    }\n\n    listBuy() {\n        return this.list(this.props.buy, true)\n    }\n\n    listSell() {\n        return this.list(this.props.sell, false)\n    }\n\n    render(): React.ReactNode {\n        const buy = this.props.displayBuy ? this.listBuy() : null;\n        const sell = this.props.displaySell ? this.listSell() : null;\n        return (\n            <div className={\"system white\"}>\n                <h3 className={\"title system-title\"}>\n                    {this.props.name}\n                </h3>\n                <button\n                    className={\"delete\"}\n                    title={\"Delete\"}\n                    onClick={() => this.props.remove(this.props.name)}\n                >\n                    🗑\n                </button>\n                <hr className={\"system-underline\"}/>\n                {buy}\n                {sell}\n            </div>\n        );\n    }\n\n    static fromSystemData(systemData: SystemData, remove: (name: string) => any, displayBuy: boolean, displaySell: boolean, key: number | string) {\n        return (\n            ((displayBuy && systemData.buy.length > 0) || (displaySell && systemData.sell.length > 0)) ?\n                <System\n                    key={key}\n                    remove={remove}\n                    name={systemData.name}\n                    displayBuy={displayBuy}\n                    displaySell={displaySell}\n                    glyphs={systemData.glyphs}\n                    tags={systemData.tags}\n                    buy={systemData.buy}\n                    sell={systemData.sell}\n                />\n                : null\n        );\n    }\n\n}\n\ninterface ListInputProps {\n    title: string;\n    item: { [key: string]: string };\n    onAdd: () => (data: { [key: string]: string }) => any;\n    onRemove: () => any;\n}\n\ninterface ListInputState {\n    count: number;\n    onChanges: ((data: { [key: string]: string }) => any)[];\n}\n\nfunction HTMLValueConverter(type: string) {\n    switch (type) {\n        case \"string\":\n            return (ev: React.ChangeEvent<HTMLInputElement>) => {\n                return ev.target.value;\n            }\n        case \"int\":\n            return (ev: React.ChangeEvent<HTMLInputElement>) => {\n                return parseInt(ev.target.value);\n            }\n        case \"float\":\n            return (ev: React.ChangeEvent<HTMLInputElement>) => {\n                return parseFloat(ev.target.value);\n            }\n        default:\n            throw new Error(\"Not a valid type.\")\n    }\n}\n\nclass ListInput extends React.Component<ListInputProps, ListInputState> {\n\n    constructor(props: ListInputProps) {\n        super(props);\n        this.state = {\n            count: 0,\n            onChanges: [],\n        };\n    }\n\n    onAdd = () => {\n        const newCount = this.state.count + 1;\n        this.state.onChanges.push(this.props.onAdd());\n        this.setState({count: newCount});\n    }\n\n    onRemove = () => {\n        if (this.state.count > 0) {\n            this.state.onChanges.pop();\n            this.setState({count: this.state.count - 1});\n        }\n    }\n\n    reset() {\n        this.setState({count: 0, onChanges: []})\n    }\n\n    render() {\n        return (\n            <div className={\"list-input-container\"}>\n                <h4 className={\"list-input-title\"}>\n                    {this.props.title}&nbsp;:&nbsp;{this.state.count}\n                </h4>\n                <ul className={\"items\"}>\n                    {\n                        this.state.onChanges.map((fun, index) => {\n                            return (\n                                <li\n                                    key={index}\n                                    className={\"item\"}\n                                >\n                                    {\n                                        Object.keys(this.props.item).map((ikey, iindex) => {\n                                            const JSType = this.props.item[ikey];\n                                            const convFunc = HTMLValueConverter(JSType);\n                                            const data: { [entry: string]: any } = {};\n                                            const onChange = this.state.onChanges[index];\n                                            return (\n                                                <input\n                                                    key={index + \":\" + iindex}\n                                                    type={\"string\"}\n                                                    placeholder={`Enter ${ikey} Here . . .`}\n                                                    onChange={(ev) => {\n                                                        data[ikey] = convFunc(ev);\n                                                        onChange(data);\n                                                    }}\n                                                />\n                                            );\n                                        })\n                                    }\n                                </li>\n                            );\n                        })\n                    }\n                    <div className={\"button-container\"}>\n                        <button\n                            className={\"remove\"}\n                            onClick={this.onRemove}\n                        > -\n                        </button>\n                        &nbsp;\n                        <button\n                            className={\"add\"}\n                            onClick={this.onAdd}\n                        > +\n                        </button>\n                    </div>\n                </ul>\n            </div>\n        );\n    }\n}\n\ninterface CreateProps {\n    error: string,\n    enabled: boolean\n    onClick: () => any\n}\n\nclass Create extends React.Component<CreateProps, {}> {\n\n    constructor(props: CreateProps) {\n        super(props);\n        this.state = {\n            error: props.error,\n            enabled: props.enabled,\n            onClick: () => {\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"clearfix create-container\"}>\n                <p className={\"error-output\"}>\n                    {this.props.error}\n                </p>\n                <button className={\"create\"} disabled={!this.props.enabled} onClick={this.props.onClick}>\n                    Create\n                </button>\n            </div>\n        );\n    }\n\n    reset() {\n        this.setState({error: \"No errors!\", enabled: true})\n    }\n\n    setError(error: string) {\n        this.setState({error: error});\n    }\n\n    setEnabled(enabled: boolean) {\n        this.setState({enabled: enabled});\n    }\n\n}\n\nfunction updateObject(obj: any, data: { [key: string]: string }) {\n    Object.keys(data).forEach(key => {\n        if (key in obj) {\n            obj[key] = data[key];\n        }\n    });\n}\n\ninterface NewSystemDataModel {\n    systemName: string;\n    glyphs: string;\n    tags: { tag: string }[];\n    buy: Item[];\n    sell: Item[];\n    error: string;\n}\n\ninterface CreatorProps {\n    systems: SystemData[];\n    onCreate: (obj: NewSystemDataModel) => any;\n}\n\nclass Creator extends React.Component<CreatorProps, NewSystemDataModel> {\n\n    snRef: React.RefObject<HTMLInputElement>;\n    gRef: React.RefObject<HTMLInputElement>;\n    tRef: React.RefObject<ListInput>;\n    bRef: React.RefObject<ListInput>;\n    sRef: React.RefObject<ListInput>;\n    cRef: React.RefObject<Create>;\n\n    constructor(props: CreatorProps) {\n        super(props);\n        this.state = {\n            systemName: \"\",\n            glyphs: \"\",\n            tags: [],\n            buy: [],\n            sell: [],\n            error: \"No errors!\"\n        };\n        this.snRef = React.createRef();\n        this.gRef = React.createRef();\n        this.tRef = React.createRef();\n        this.bRef = React.createRef();\n        this.sRef = React.createRef();\n        this.cRef = React.createRef();\n    }\n\n    reset = () => {\n        this.setState({\n            systemName: \"\",\n            glyphs: \"\",\n            tags: [],\n            buy: [],\n            sell: []\n        });\n        this.tRef.current?.reset();\n        this.bRef.current?.reset();\n        this.sRef.current?.reset();\n        this.cRef.current?.reset();\n    }\n\n    invalidItem = (item: Item) => {\n        return item.name === \"\" || item.name === undefined || item.name === null\n            || item.price === 0 || item.price === undefined || item.price === null\n            || item.percent === 0 || item.percent === undefined || item.percent === null;\n    }\n\n    create = () => {\n        if (this.state.systemName === \"\") {\n            this.setState({error: \"The system must have a name.\"})\n        } else if (this.props.systems.some(system => system.name === this.state.systemName)) {\n            this.setState({error: \"System name is not unique.\"})\n        } else if (this.state.buy.length === 0 && this.state.sell.length === 0) {\n            this.setState({error: \"No items have been added to system.\"})\n        } else if (this.state.buy.some(this.invalidItem) || this.state.sell.some(this.invalidItem)\n        ) {\n            this.setState({error: \"All items must have a name, price and percent.\"})\n        } else if(new Set(this.state.buy).size !== this.state.buy.length\n            || new Set(this.state.sell).size !== this.state.sell.length\n        ) {\n            this.setState({error: \"All item name in a system must be unique.\"})\n        } else {\n            this.props.onCreate(this.state);\n            this.reset();\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"creator right\"}>\n                <h2 className={\"section-title title\"}>\n                    New System\n                </h2>\n                <div className={\"new-system\"}>\n                    <input\n                        type={\"text\"}\n                        placeholder={\"Enter System Name Here . . .\"}\n                        className={\"form-margin\"}\n                        ref={this.snRef}\n                        value={this.state.systemName}\n                        onChange={ev => this.setState({systemName: ev.target.value})}\n                    />\n                    <input\n                        type={\"text\"}\n                        placeholder={\"Enter Glyphs Here . . .\"}\n                        className={\"form-margin\"}\n                        ref={this.gRef}\n                        value={this.state.glyphs}\n                        onChange={ev => this.setState({glyphs: ev.target.value})}\n                    />\n                    <ListInput\n                        title={\"System Tags\"}\n                        item={{\n                            \"tag\": \"string\"\n                        }}\n                        ref={this.sRef}\n                        onAdd={() => {\n                            const item = {\"tag\": \"\"};\n                            this.state.tags.push(item);\n                            return (update: { [key: string]: string }) => {\n                                updateObject(item, update);\n                            };\n                        }}\n                        onRemove={() => {\n                            this.state.tags.pop()\n                        }}\n                    />\n                    <ListInput\n                        title={\"Resources to Buy\"}\n                        item={{\n                            \"name\": \"string\",\n                            \"price\": \"int\",\n                            \"percent\": \"float\"\n                        }}\n                        ref={this.bRef}\n                        onAdd={() => {\n                            const item = {\"name\": \"\", price: 0, percent: 0};\n                            this.state.buy.push(item);\n                            return (update: { [key: string]: string }) => {\n                                updateObject(item, update);\n                            };\n                        }}\n                        onRemove={() => {\n                            this.state.buy.pop()\n                        }}\n                    />\n                    <ListInput\n                        title={\"Resources to Sell\"}\n                        item={{\n                            \"name\": \"string\",\n                            \"price\": \"int\",\n                            \"percent\": \"float\"\n                        }}\n                        ref={this.sRef}\n                        onAdd={() => {\n                            const item = {\"name\": \"\", price: 0, percent: 0};\n                            this.state.sell.push(item);\n                            return (update: { [key: string]: string }) => {\n                                updateObject(item, update);\n                            };\n                        }}\n                        onRemove={() => {\n                            this.state.sell.pop()\n                        }}\n                    />\n                    <Create\n                        error={this.state.error}\n                        enabled={true}\n                        ref={this.cRef}\n                        onClick={this.create}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\ninterface PopupProps {\n    title: string;\n    text: string;\n    buttons: { text: string, action: () => any }[];\n}\n\ninterface PopupState {\n    display: boolean;\n}\n\nclass Popup extends React.Component<PopupProps, PopupState> {\n\n    constructor(props: PopupProps) {\n        super(props);\n        this.state = {\n            display: false\n        };\n    }\n\n    open = () => {\n        this.setState({display: true})\n    }\n\n    close = () => {\n        this.setState({display: false})\n    }\n\n    render() {\n        return (\n            <div\n                id={\"popup\"}\n                className={ this.state.display ? \"popup\" : \"none\"}\n                onClick={ev => {\n                    if ((ev.target as any).id === \"popup\") {\n                        this.close();\n                    }\n                }}\n            >\n                <div className={\"popup-content\"}>\n                    <h1> {this.props.title} </h1>\n                    <p> {this.props.text} </p>\n                    <div className={\"popup-buttons\"}>\n                        {\n                            [...this.props.buttons, {text: 'Done', action: this.close}]\n                                .map((button, index) => {\n                                return (\n                                    <button\n                                        key={index}\n                                        onClick={button.action}\n                                        className={\"popup-button\"}\n                                    >\n                                        {button.text}\n                                    </button>\n                                );\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\ninterface AppState {\n    systems: SystemData[];\n    search: string;\n}\n\nclass App extends React.Component<{}, AppState> {\n\n    pRef: React.RefObject<Popup>;\n\n    constructor(props: {}) {\n        super(props);\n        this.pRef = React.createRef<Popup>();\n        let systemsS = localStorage.getItem(\"systems\");\n        let systems;\n        if (systemsS) {\n            systems = JSON.parse(systemsS);\n        } else {\n            systems = [];\n        }\n        this.state = {\n            systems: systems,\n            search: \"\"\n        };\n    }\n\n    search = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({search: event.target.value.toLowerCase()});\n    }\n\n    remove = (name: string) => {\n        const systems = this.state.systems.filter(system => system.name !== name);\n        localStorage.setItem(\"systems\", JSON.stringify(systems));\n        this.setState({systems: systems});\n    }\n\n    render() {\n        return (\n            <div className={\"app white\"}>\n                <h1 className={\"title site-title\"}>\n                    <button\n                        className={\"settings\"}\n                        onClick={() => this.pRef.current?.open()}\n                    >\n                        <span role=\"img\" aria-label=\"settings\"> ⚙️ </span>️\n                    </button>\n                    No Man's Sky Market Database\n                </h1>\n                <div className={\"main\"}>\n                    <div className={\"created left\"}>\n                        <div className={\"search\"}>\n                            <input\n                                type={\"text\"}\n                                placeholder={\"Enter Item Name Here . . .\"}\n                                onChange={this.search}\n                            />\n                        </div>\n                        <div className={\"market\"}>\n                            <div className={\"buy left\"}>\n                                <h2 className={\"section-title title\"}>\n                                    Buy\n                                </h2>\n                                <div className={\"systems\"}>\n                                    {\n                                        this.state.systems\n                                            .filter(system =>\n                                                system.buy.some(item =>\n                                                    item.name.toLowerCase().indexOf(this.state.search) !== -1))\n                                            .map((system, index) =>\n                                                System.fromSystemData(system, this.remove, true, false, index))\n                                    }\n                                </div>\n                            </div>\n                            <div className={\"sell right\"}>\n                                <h2 className={\"section-title title\"}>\n                                    Sell\n                                </h2>\n                                <div className={\"systems\"}>\n                                    {\n                                        this.state.systems\n                                            .filter(system =>\n                                                system.sell.some(item =>\n                                                    item.name.toLowerCase().indexOf(this.state.search) !== -1))\n                                            .map((system, index) =>\n                                                System.fromSystemData(system, this.remove, false, true, index))\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <Creator\n                        systems={this.state.systems}\n                        onCreate={nsdm => {\n                            const systems = [...this.state.systems,\n                                {\n                                    name: nsdm.systemName,\n                                    glyphs: nsdm.glyphs,\n                                    tags: nsdm.tags.map(tag => tag.tag),\n                                    buy: nsdm.buy,\n                                    sell: nsdm.sell\n                                }\n                            ];\n                            localStorage.setItem(\"systems\", JSON.stringify(systems));\n                            this.setState({systems: systems});\n                        }}\n                    />\n                </div>\n                <Popup\n                    title={\"Options\"}\n                    text={\n                        \"Save will save your systems to a file locally. \" +\n                        \"Load will add all of the systems in a given file to your local DB. \" +\n                        \"Clear will delete all entries from your local DB. \" +\n                        \"Done will close this popup.\"\n                    }\n                    buttons={\n                        [\n                            {\n                                text: \"Save\",\n                                action: () => {\n                                    const blob = new Blob(\n                                        [localStorage.getItem(\"systems\") as string],\n                                        {type: 'text/json'}\n                                    );\n                                    if (window.navigator.msSaveOrOpenBlob as unknown) {\n                                        window.navigator.msSaveBlob(blob, \"NoMansSkySystemDB.json\");\n                                    } else {\n                                        const elem = window.document.createElement('a');\n                                        elem.href = window.URL.createObjectURL(blob);\n                                        elem.download = \"NoMansSkySystemDB.json\";\n                                        document.body.appendChild(elem);\n                                        elem.click();\n                                        document.body.removeChild(elem);\n                                    }\n                                }\n                            },\n                            {\n                                text: \"Load\",\n                                action: () => {\n                                    // open file dialog\n                                    // validate is json, validate each system\n                                    // let user know of success or failure\n                                    const blob = new Blob();\n                                    if (window.navigator.msSaveOrOpenBlob as unknown) {\n                                        window.navigator.msSaveOrOpenBlob(blob);\n                                    } else {\n                                        const elem = window.document.createElement('input');\n                                        elem.type = \"file\";\n                                        elem.onchange = () => {\n                                            if (elem.files) {\n                                                const fr = new FileReader();\n                                                fr.onloadend = () => {\n                                                    if (fr.error) {\n                                                        alert(\"File upload failed. File Reader was not able to read file.\")\n                                                    } else {\n                                                        try {\n                                                            const data = JSON.parse(fr.result as string);\n                                                            console.log(data)\n                                                            if (verifyData(data)) {\n                                                                const systems = [...this.state.systems, ...data.systems];\n                                                                localStorage.setItem(\"systems\", JSON.stringify(systems));\n                                                                this.setState({systems: systems});\n                                                            } else {\n                                                                alert(\"The file that you uploaded is invalid.\")\n                                                            }\n                                                        } catch (e) {\n                                                            console.log(e)\n                                                            alert(\"The file that you uploaded could not be parsed. Try uploading a different file.\")\n                                                        }\n                                                    }\n                                                };\n                                                fr.readAsText(elem.files[0]);\n                                            }\n                                        }\n                                        document.body.appendChild(elem);\n                                        elem.click();\n                                        document.body.removeChild(elem);\n                                    }\n                                }\n                            },\n                            {\n                                text: \"Clear\",\n                                action: () => {\n                                    localStorage.clear();\n                                    this.setState({systems: []});\n                                }\n                            }\n                        ]\n                    }\n                    ref={this.pRef}\n                />\n            </div>\n        );\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}